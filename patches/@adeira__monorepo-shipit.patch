diff --git a/bin/shipit.js b/bin/shipit.js
index 27fea2c945ab94e03ac22d73a0da7c61eb8f6f42..fcf3de1f78e524b0e8b0a78a9c5cf9d9f1460009 100755
--- a/bin/shipit.js
+++ b/bin/shipit.js
@@ -13,13 +13,16 @@ var _createVerifyRepoPhase = _interopRequireDefault(require("../src/phases/creat
 var _createPushPhase = _interopRequireDefault(require("../src/phases/createPushPhase"));
 // yarn monorepo-babel-node src/monorepo-shipit/bin/shipit.js --help
 // yarn monorepo-babel-node src/monorepo-shipit/bin/shipit.js --committer-name=A --committer-email=B
-_commander.program.version(require('./../package.json').version).description('Export a monorepo to multiple git repositories').requiredOption('--config-filter <glob>', 'Glob pattern to filter config files', '/*.js').requiredOption('--config-dir <path>', 'Path to the directory with config files', './.shipit').requiredOption('--committer-name <name>', 'Name of the committer').requiredOption('--committer-email <email>', 'Email of the committer');
+_commander.program.version(require('./../package.json').version).description('Export a monorepo to multiple git repositories').requiredOption('--config-filter <glob>', 'Glob pattern to filter config files', '/*.js').requiredOption('--config-dir <path>', 'Path to the directory with config files', './.shipit').requiredOption('--committer-name <name>', 'Name of the committer').requiredOption('--committer-email <email>', 'Email of the committer')
+.option('--dry-run', 'Skips the push phase', false);
 _commander.program.parse();
 const options = _commander.program.opts();
+function skipPushPhase() {}
+skipPushPhase.readableName = 'Skipping push new changes';
 process.env.SHIPIT_COMMITTER_EMAIL = options.committerEmail;
 process.env.SHIPIT_COMMITTER_NAME = options.committerName;
 (0, _iterateConfigs.default)(options, config => {
-  new Set([(0, _createClonePhase.default)(config.exportedRepoURL, config.destinationPath), (0, _createCheckCorruptedRepoPhase.default)(config.destinationPath), (0, _createCleanPhase.default)(config.destinationPath), (0, _createSyncPhase.default)(config), (0, _createVerifyRepoPhase.default)(config), (0, _createPushPhase.default)(config)]).forEach(phase => {
+  new Set([(0, _createClonePhase.default)(config.exportedRepoURL, config.destinationPath), (0, _createCheckCorruptedRepoPhase.default)(config.destinationPath), (0, _createCleanPhase.default)(config.destinationPath), (0, _createSyncPhase.default)(config), (0, _createVerifyRepoPhase.default)(config), options.dryRun ? skipPushPhase : (0, _createPushPhase.default)(config)]).forEach(phase => {
     console.log(`${_chalk.default.dim('Starting phase:')} %s`, phase.readableName);
     phase();
     console.log(`${_chalk.default.dim('Finished phase:')} %s`, phase.readableName);
